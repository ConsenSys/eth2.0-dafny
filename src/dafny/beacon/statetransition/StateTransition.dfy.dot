digraph G {
fontname=helvetica;
subgraph cluster__35_BeaconChainTypes {
style=filled;
fontsize="20.0";
fillcolor="#d0d1e6";
fontcolor="#3690c0";
penwidth=2;
label=BeaconChainTypes;
hash__tree__root [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#3690c0"];
}

subgraph cluster__51_BeaconHelpers {
style=filled;
fontsize="20.0";
fillcolor=cornsilk;
fontcolor=bisque3;
penwidth=2;
label=BeaconHelpers;
all [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
count__eth1__data__votes [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
compute__start__slot__at__epoch [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
compute__epoch__at__slot [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
get__block__root__at__slot [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
get__block__root [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
get__previous__epoch [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
get__current__epoch [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
}

subgraph cluster__75_EpochProcessingSpec {
style=filled;
fontsize="20.0";
fillcolor="#fee6ce";
fontcolor="#fd8d3c";
penwidth=2;
label=EpochProcessingSpec;
updateFinalisedCheckpoint [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
updateJustification [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
finalUpdates [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
updateJustificationCurrentEpoch [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
updateJustificationPrevEpoch [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
updateJustificationAndFinalisation [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#fd8d3c"];
}

subgraph cluster__8_Helpers {
style=filled;
fontsize="20.0";
fillcolor="#fde0ef";
fontcolor="#de77ae";
penwidth=2;
label=Helpers;
seqBinOpMap [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
seqMap [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
timeSeq [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
flatten [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
ceil [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
flattenLength [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#de77ae"];
}

subgraph cluster__10_MathHelpers {
style=filled;
fontsize="20.0";
fillcolor=lightpink;
fontcolor=tomato;
penwidth=2;
label=MathHelpers;
get__prev__power__of__two [shape=rectangle, style=filled, fontname=helvetica, fillcolor=tomato];
isPowerOf2 [shape=rectangle, style=filled, fontname=helvetica, fillcolor=tomato];
power2 [shape=rectangle, style=filled, fontname=helvetica, fillcolor=tomato];
get__next__power__of__two [shape=rectangle, style=filled, fontname=helvetica, fillcolor=tomato];
min [shape=rectangle, style=filled, fontname=helvetica, fillcolor=tomato];
}

subgraph cluster__100_StateTransition {
style=filled;
fontsize="20.0";
fillcolor="#ffffdd";
fontcolor=gold;
penwidth=2;
label=StateTransition;
process__attestation [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
isValidBlock [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
isValidAttestationInState [shape=rectangle, style=filled, fontname=helvetica, fillcolor=gold];
}

subgraph cluster__98_ProcessOperationsSpec {
style=filled;
fontsize="20.0";
fillcolor="#e0f3db";
fontcolor=darkolivegreen3;
penwidth=2;
label=ProcessOperationsSpec;
seqKeysInDeposits [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
seqKeysInValidators [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
increase__balance [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
total__deposits [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
get__validator__from__deposit [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
updateDeposit [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
total__balances [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
get__validator__index [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
validator__append [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
balance__append [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
updateDeposits [shape=rectangle, style=filled, fontname=helvetica, fillcolor=darkolivegreen3];
}

subgraph cluster__66_AttestationsHelpers {
style=filled;
fontsize="20.0";
fillcolor="#fde0ef";
fontcolor=orchid3;
penwidth=2;
label=AttestationsHelpers;
filterAttestations [shape=rectangle, style=filled, fontname=helvetica, fillcolor=orchid3];
collectValidatorsIndicesAttestatingForTarget [shape=rectangle, style=filled, fontname=helvetica, fillcolor=orchid3];
get__attesting__balance [shape=rectangle, style=filled, fontname=helvetica, fillcolor=orchid3];
countAttestationsForLink [shape=rectangle, style=filled, fontname=helvetica, fillcolor=orchid3];
trueBitsCount [shape=rectangle, style=filled, fontname=helvetica, fillcolor=orchid3];
get__matching__target__attestations [shape=rectangle, style=filled, fontname=helvetica, fillcolor=orchid3];
collectValidatorsAttestatingForLink [shape=rectangle, style=filled, fontname=helvetica, fillcolor=orchid3];
get__matching__source__attestations [shape=rectangle, style=filled, fontname=helvetica, fillcolor=orchid3];
get__total__active__balance [shape=rectangle, style=filled, fontname=helvetica, fillcolor=orchid3];
}

subgraph cluster__System {
style=filled;
fontsize="20.0";
fillcolor=snow2;
fontcolor=slategrey;
penwidth=2;
label=System;
requires [shape=rectangle, style=filled, fontname=helvetica, fillcolor=slategrey];
}

subgraph cluster__77_StateTransitionSpec {
style=filled;
fontsize="20.0";
fillcolor="#f0f9e8";
fontcolor=palegreen4;
penwidth=2;
label=StateTransitionSpec;
nextSlot [shape=rectangle, style=filled, fontname=helvetica, fillcolor=palegreen4];
resolveStateRoot [shape=rectangle, style=filled, fontname=helvetica, fillcolor=palegreen4];
forwardStateToSlot [shape=rectangle, style=filled, fontname=helvetica, fillcolor=palegreen4];
keysInValidators [shape=rectangle, style=filled, fontname=helvetica, fillcolor=palegreen4];
addBlockToState [shape=rectangle, style=filled, fontname=helvetica, fillcolor=palegreen4];
updateEth1Data [shape=rectangle, style=filled, fontname=helvetica, fillcolor=palegreen4];
advanceSlot [shape=rectangle, style=filled, fontname=helvetica, fillcolor=palegreen4];
}

subgraph cluster__12_Eth2Types {
style=filled;
fontsize="20.0";
fillcolor="#d0d1e6";
fontcolor="#3690c0";
penwidth=2;
label=Eth2Types;
typeOf [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#3690c0"];
wellTyped [shape=rectangle, style=filled, fontname=helvetica, fillcolor="#3690c0"];
}

subgraph cluster__6_SeqHelpers {
style=filled;
fontsize="20.0";
fillcolor=cornsilk;
fontcolor=bisque3;
penwidth=2;
label=SeqHelpers;
seqToSet [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
seqInter [shape=rectangle, style=filled, fontname=helvetica, fillcolor=bisque3];
}

seqBinOpMap -> seqBinOpMap;
seqMap -> requires;
seqMap -> seqMap;
updateFinalisedCheckpoint -> all;
updateFinalisedCheckpoint -> get__current__epoch;
updateFinalisedCheckpoint -> updateFinalisedCheckpoint;
timeSeq -> timeSeq;
process__attestation -> get__current__epoch;
process__attestation -> isValidAttestationInState;
seqKeysInDeposits -> seqKeysInDeposits;
count__eth1__data__votes -> count__eth1__data__votes;
compute__epoch__at__slot -> compute__epoch__at__slot;
typeOf -> typeOf;
typeOf -> wellTyped;
filterAttestations -> filterAttestations;
get__prev__power__of__two -> get__prev__power__of__two;
collectValidatorsIndicesAttestatingForTarget -> collectValidatorsIndicesAttestatingForTarget;
collectValidatorsIndicesAttestatingForTarget -> trueBitsCount;
nextSlot -> finalUpdates;
nextSlot -> nextSlot;
nextSlot -> resolveStateRoot;
nextSlot -> updateJustificationAndFinalisation;
resolveStateRoot -> advanceSlot;
resolveStateRoot -> hash__tree__root;
resolveStateRoot -> resolveStateRoot;
forwardStateToSlot -> forwardStateToSlot;
forwardStateToSlot -> nextSlot;
keysInValidators -> keysInValidators;
get__block__root -> compute__start__slot__at__epoch;
get__block__root -> get__block__root__at__slot;
flatten -> flatten;
flatten -> flattenLength;
countAttestationsForLink -> countAttestationsForLink;
seqKeysInValidators -> seqKeysInValidators;
updateJustification -> get__current__epoch;
updateJustification -> updateJustificationCurrentEpoch;
updateJustification -> updateJustificationPrevEpoch;
increase__balance -> increase__balance;
total__deposits -> total__deposits;
get__validator__from__deposit -> get__validator__from__deposit;
get__validator__from__deposit -> min;
isPowerOf2 -> power2;
power2 -> power2;
get__previous__epoch -> get__current__epoch;
get__previous__epoch -> get__previous__epoch;
trueBitsCount -> trueBitsCount;
get__matching__target__attestations -> filterAttestations;
get__matching__target__attestations -> get__block__root;
get__matching__target__attestations -> get__current__epoch;
get__matching__target__attestations -> get__matching__source__attestations;
get__matching__target__attestations -> get__matching__target__attestations;
get__matching__target__attestations -> get__previous__epoch;
updateDeposit -> balance__append;
updateDeposit -> get__validator__from__deposit;
updateDeposit -> get__validator__index;
updateDeposit -> increase__balance;
updateDeposit -> seqKeysInValidators;
updateDeposit -> total__balances;
updateDeposit -> updateDeposit;
updateDeposit -> validator__append;
ceil -> ceil;
total__balances -> total__balances;
addBlockToState -> addBlockToState;
addBlockToState -> hash__tree__root;
get__validator__index -> get__validator__index;
collectValidatorsAttestatingForLink -> collectValidatorsAttestatingForLink;
collectValidatorsAttestatingForLink -> trueBitsCount;
get__matching__source__attestations -> get__current__epoch;
get__matching__source__attestations -> get__matching__source__attestations;
get__matching__source__attestations -> get__previous__epoch;
flattenLength -> flattenLength;
updateJustificationCurrentEpoch -> get__attesting__balance;
updateJustificationCurrentEpoch -> get__block__root;
updateJustificationCurrentEpoch -> get__current__epoch;
updateJustificationCurrentEpoch -> get__matching__target__attestations;
updateJustificationCurrentEpoch -> get__total__active__balance;
updateJustificationCurrentEpoch -> updateJustificationCurrentEpoch;
seqToSet -> seqToSet;
isValidBlock -> addBlockToState;
isValidBlock -> forwardStateToSlot;
isValidBlock -> hash__tree__root;
isValidBlock -> nextSlot;
isValidBlock -> total__balances;
isValidBlock -> total__deposits;
isValidBlock -> updateDeposits;
isValidBlock -> updateEth1Data;
updateJustificationPrevEpoch -> get__attesting__balance;
updateJustificationPrevEpoch -> get__block__root;
updateJustificationPrevEpoch -> get__current__epoch;
updateJustificationPrevEpoch -> get__matching__target__attestations;
updateJustificationPrevEpoch -> get__previous__epoch;
updateJustificationPrevEpoch -> get__total__active__balance;
updateJustificationPrevEpoch -> updateJustificationPrevEpoch;
get__current__epoch -> compute__epoch__at__slot;
get__current__epoch -> get__current__epoch;
get__next__power__of__two -> get__next__power__of__two;
updateEth1Data -> count__eth1__data__votes;
updateEth1Data -> updateEth1Data;
updateDeposits -> total__balances;
updateDeposits -> total__deposits;
updateDeposits -> updateDeposit;
updateDeposits -> updateDeposits;
isValidAttestationInState -> compute__epoch__at__slot;
isValidAttestationInState -> get__current__epoch;
isValidAttestationInState -> get__previous__epoch;
hash__tree__root -> hash__tree__root;
advanceSlot -> hash__tree__root;
updateJustificationAndFinalisation -> updateFinalisedCheckpoint;
updateJustificationAndFinalisation -> updateJustification;
wellTyped -> typeOf;
wellTyped -> wellTyped;
seqInter -> seqInter;
}
